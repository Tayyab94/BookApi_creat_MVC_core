// <auto-generated />
using System;
using BookAPIs_Creation_MVCCore.Serivces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookAPIs_Creation_MVCCore.Migrations
{
    [DbContext(typeof(BookDbContext))]
    [Migration("20200109215939_first_Initialization")]
    partial class first_Initialization
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Author", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Countryid");

                    b.Property<string>("first_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("last_NameW")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("id");

                    b.HasIndex("Countryid");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Book", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("date_Published");

                    b.Property<string>("isbn")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.BookAuthor", b =>
                {
                    b.Property<int>("book_Id");

                    b.Property<int>("author_Id");

                    b.HasKey("book_Id", "author_Id");

                    b.HasIndex("author_Id");

                    b.ToTable("BookAuthors");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.BookCategory", b =>
                {
                    b.Property<int>("book_Id");

                    b.Property<int>("category_Id");

                    b.HasKey("book_Id", "category_Id");

                    b.HasIndex("category_Id");

                    b.ToTable("BookCategories");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Review", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Bookid");

                    b.Property<int?>("Reviewerid");

                    b.Property<string>("headline")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("rating");

                    b.Property<string>("review_Text")
                        .IsRequired()
                        .HasMaxLength(2000);

                    b.HasKey("id");

                    b.HasIndex("Bookid");

                    b.HasIndex("Reviewerid");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Reviewer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("first_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("last_NameW")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("id");

                    b.ToTable("Reviewers");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Author", b =>
                {
                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Country", "Country")
                        .WithMany("Authors")
                        .HasForeignKey("Countryid");
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.BookAuthor", b =>
                {
                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("author_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("book_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.BookCategory", b =>
                {
                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Book", "Book")
                        .WithMany("BookCategories")
                        .HasForeignKey("book_Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Category", "Category")
                        .WithMany("BookCategories")
                        .HasForeignKey("category_Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookAPIs_Creation_MVCCore.Models.Review", b =>
                {
                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("Bookid");

                    b.HasOne("BookAPIs_Creation_MVCCore.Models.Reviewer", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("Reviewerid");
                });
#pragma warning restore 612, 618
        }
    }
}
